package ord.techzonefun.Controllers;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import ord.techzonefun.Entities.Customer;
import ord.techzonefun.Entities.CustomerInfoDTO;
import ord.techzonefun.Entities.User;
import ord.techzonefun.Repositories.CustomerRepository;
import ord.techzonefun.Repositories.UserRepository;
import ord.techzonefun.Services.CustomerService;
import ord.techzonefun.Services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.security.web.csrf.CsrfTokenRepository;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/auth")
@Slf4j
@CrossOrigin(origins = "http://localhost:3000")

public class AuthenticationController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private PasswordEncoder passwordEncoder; // M√£ h√≥a m·∫≠t kh·∫©u

    @Autowired
    private UserService userService;

    @Autowired
    private CustomerService customerService;


    private static final String SECRET_KEY = "hdktn123"; // N√™n ƒë∆∞a v√†o application.

    private static final String TESTDEV_USERNAME = "testdev"; // T√™n ng∆∞·ªùi d√πng duy nh·∫•t
    private static final String TESTDEV_PASSWORD = "password";

    // ƒêƒÉng nh·∫≠p Testdev
    @PostMapping("/testdev/login")
    public ResponseEntity<?> loginTestdev(HttpServletRequest request, @RequestBody User user) {

        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ nh·∫≠p ƒë√∫ng username v√† password kh√¥ng
        if (user.getUsername() == null || user.getPassword() == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Collections.singletonMap("message", "T√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng."));
        }

        if (TESTDEV_USERNAME.equals(user.getUsername()) && TESTDEV_PASSWORD.equals(user.getPassword())) {
            // T·∫°o ƒë·ªëi t∆∞·ª£ng Authentication v·ªõi vai tr√≤ 'ROLE_TESTDEV'
            UsernamePasswordAuthenticationToken authentication =
                    new UsernamePasswordAuthenticationToken(TESTDEV_USERNAME, null, AuthorityUtils.createAuthorityList("ROLE_TESTDEV"));

            // ƒê·∫∑t th√¥ng tin x√°c th·ª±c v√†o SecurityContext
            SecurityContextHolder.getContext().setAuthentication(authentication);

            // ‚úÖ L∆∞u SecurityContext v√†o session
            HttpSession session = request.getSession(true);
            session.setAttribute("SPRING_SECURITY_CONTEXT", SecurityContextHolder.getContext());

            // üî• Debug xem session c√≥ l∆∞u ƒë√∫ng kh√¥ng
            System.out.println("Session ID: " + session.getId());
            System.out.println("User Roles: " + authentication.getAuthorities());

            // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
            return ResponseEntity.ok(Collections.singletonMap("message", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng. Chuy·ªÉn h∆∞·ªõng t·ªõi trang /testdev."));
        } else {
            // Tr·∫£ v·ªÅ l·ªói n·∫øu t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Collections.singletonMap("message", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u."));
        }
    }

    @PostMapping(value = "/register", consumes = "application/json", produces = "application/json")
    public ResponseEntity<?> registerCustomer(@Valid @RequestBody User user, HttpServletRequest request, HttpServletResponse response) {
        try {
            // 1. Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
            if (userService.loginUser(user.getUsername(), user.getPassword()).isPresent()) {
                return ResponseEntity.badRequest().body(Map.of("message", "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"));
            }

            // 2. T·∫°o User v·ªõi phoneNumber
            User savedUser = userService.registerUser(user.getUsername(), user.getPassword(), user.getPhoneNumber());
            log.info("User created: ID={}, Username={}, PhoneNumber={}", savedUser.getId(), savedUser.getUsername(), savedUser.getPhoneNumber());

            // 3. T·∫°o Customer t∆∞∆°ng ·ª©ng
            Customer customer = new Customer();
            customer.setId(UUID.randomUUID().toString());
            customer.setName(user.getUsername());
            customer.setUserId(savedUser.getId());
            customer.setPhoneNumber(savedUser.getPhoneNumber()); // L∆∞u phoneNumber
            customerRepository.save(customer);
            log.info("Customer created: ID={}, Name={}, PhoneNumber={}", customer.getId(), customer.getName(), customer.getPhoneNumber());

            // 4. Thi·∫øt l·∫≠p x√°c th·ª±c v√† session
            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                    savedUser.getUsername(), null, AuthorityUtils.createAuthorityList("ROLE_CUSTOMER")
            );
            SecurityContextHolder.getContext().setAuthentication(authentication);
            HttpSession session = request.getSession(true);
            session.setAttribute("SPRING_SECURITY_CONTEXT", SecurityContextHolder.getContext());

            // 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi JSESSIONID trong cookie
            Cookie cookie = new Cookie("JSESSIONID", session.getId());
            cookie.setHttpOnly(true);
            cookie.setSecure(false); // ƒê·ªÉ false n·∫øu d√πng localhost
            cookie.setPath("/");
            response.addCookie(cookie);

            return ResponseEntity.ok(Map.of(
                    "message", "ƒêƒÉng k√Ω th√†nh c√¥ng",
                    "userId", savedUser.getId(),
                    "customerId", customer.getId(),
                    "phoneNumber", savedUser.getPhoneNumber()
            ));
        } catch (IllegalArgumentException e) {
            log.error("Registration failed: {}", e.getMessage());
            return ResponseEntity.badRequest().body(Map.of("message", e.getMessage()));
        } catch (Exception e) {
            log.error("L·ªói khi ƒëƒÉng k√Ω ng∆∞·ªùi d√πng", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("message", "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau"));
        }
    }
    @PostMapping("/login")
    public ResponseEntity<?> loginCustomer(@RequestBody User user, HttpServletRequest request, HttpServletResponse response) {
        Optional<User> optionalUser = userService.loginUser(user.getUsername(), user.getPassword());
        if (optionalUser.isPresent()) {
            User userLogin = optionalUser.get();
            if ("CUSTOMER".equals(userLogin.getRoles().get(0))) {
                try {
                    Customer customer = customerRepository.findByUserId(userLogin.getId())
                            .orElseThrow(() -> new NoSuchElementException("Customer not found with userId: " + userLogin.getId()));

                    // T·∫°o Authentication
                    UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
                            userLogin, null,
                            AuthorityUtils.createAuthorityList(userLogin.getRoles().stream()
                                    .map(role -> "ROLE_" + role.toUpperCase())
                                    .toArray(String[]::new)));
                    SecurityContextHolder.getContext().setAuthentication(authentication);

                    // L∆∞u SecurityContext v√†o session
                    HttpSession session = request.getSession(true); // T·∫°o ho·∫∑c l·∫•y session
                    session.setAttribute("SPRING_SECURITY_CONTEXT", SecurityContextHolder.getContext());
                    log.info("SecurityContext saved to session ID: {}", session.getId());

                    // T·∫°o cookie JSESSIONID
                    Cookie cookie = new Cookie("JSESSIONID", session.getId());
                    cookie.setHttpOnly(true);
                    cookie.setSecure(false);
                    cookie.setPath("/");
                    response.addCookie(cookie);

                    Map<String, Object> responseBody = new HashMap<>();
                    responseBody.put("message", "ƒêƒÉng nh·∫≠p th√†nh c√¥ng.");
                    responseBody.put("customerId", customer.getId());
                    responseBody.put("username", userLogin.getUsername());
                    return ResponseEntity.ok(responseBody);
                } catch (Exception e) {
                    log.warn("Kh√¥ng t√¨m th·∫•y customer v·ªõi userId: {}", userLogin.getId());
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng.");
                }
            }
        }
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.");
    }

    @GetMapping("/customers")
    @PreAuthorize("hasRole('ROLE_TESTDEV')")
    public ResponseEntity<List<CustomerInfoDTO>> getAllCustomers(HttpServletRequest request) {
        log.info("Received GET /api/customers request from session: {}", request.getSession().getId());
        try {
            List<CustomerInfoDTO> customers = customerService.getAllCustomersWithUserInfo();
            log.info("Returning {} customers", customers.size());
            return ResponseEntity.ok(customers);
        } catch (Exception e) {
            log.error("Error fetching customers", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @DeleteMapping("/customers/{customerId}")
    @PreAuthorize("hasRole('ROLE_TESTDEV')")
    public ResponseEntity<Map<String, String>> deleteCustomer(@PathVariable String customerId) {
        log.info("Received DELETE /api/testdev/customers/{} request", customerId);
        try {
            customerService.deleteCustomer(customerId);
            return ResponseEntity.ok(Map.of("message", "X√≥a kh√°ch h√†ng th√†nh c√¥ng"));
        } catch (NoSuchElementException e) {
            log.error("Customer not found: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("message", e.getMessage()));
        } catch (Exception e) {
            log.error("Error deleting customer", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("message", "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau"));
        }
    }

    @PostMapping("/auth/logout")
    public ResponseEntity<?> logout(HttpServletRequest request) {
        request.getSession().invalidate(); // X√≥a session
        SecurityContextHolder.clearContext(); // X√≥a context authentication
        return ResponseEntity.ok(Collections.singletonMap("message", "ƒê√£ ƒëƒÉng xu·∫•t"));
    }

    /*
    @GetMapping("/csrf")
    public ResponseEntity<CsrfToken> getCsrfToken(HttpServletRequest request) {
        CsrfToken csrfToken = (CsrfToken) request.getAttribute(CsrfToken.class.getName());
        return ResponseEntity.ok(csrfToken);
    }

     */

    @GetMapping("/csrf")
    public ResponseEntity<Map<String, String>> getCsrfToken(HttpServletRequest request) {
        CsrfToken csrfToken = (CsrfToken) request.getAttribute(CsrfToken.class.getName());
        if (csrfToken == null) {
            csrfToken = csrfTokenRepository.generateToken(request);
            log.info("Generated new CSRF token: {}", csrfToken.getToken());
        } else {
            log.info("Retrieved existing CSRF token: {}", csrfToken.getToken());
        }

        // L∆∞u token v√†o session
        HttpSession session = request.getSession(false);
        if (session != null) {
            session.setAttribute("_csrf", csrfToken);
            log.info("CSRF token saved to session ID: {}", session.getId());
        }

        Map<String, String> response = new HashMap<>();
        response.put("token", csrfToken.getToken());
        return ResponseEntity.ok(response);
    }

    @PostMapping("/customers/{customerId}/reset-password")
    @PreAuthorize("hasRole('ROLE_TESTDEV')")
    public ResponseEntity<Map<String, String>> resetCustomerPassword(@PathVariable String customerId) {
        log.info("Received POST /api/testdev/customers/{}/reset-password request", customerId);
        try {
            String tempPassword = customerService.resetPassword(customerId);
            return ResponseEntity.ok(Map.of(
                    "message", "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng",
                    "tempPassword", tempPassword
            ));
        } catch (NoSuchElementException e) {
            log.error("Customer not found: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("message", e.getMessage()));
        } catch (Exception e) {
            log.error("Error resetting password", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("message", "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau"));
        }
    }

    @Autowired
    private CsrfTokenRepository csrfTokenRepository; // ƒê·∫£m b·∫£o inject repository
}
